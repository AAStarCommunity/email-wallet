// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Relayer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Relayer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Relayer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Relayer", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Relayer | null {
    return changetype<Relayer | null>(
      store.get_in_block("Relayer", id.toHexString())
    );
  }

  static load(id: Bytes): Relayer | null {
    return changetype<Relayer | null>(store.get("Relayer", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get randHash(): Bytes {
    let value = this.get("randHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set randHash(value: Bytes) {
    this.set("randHash", Value.fromBytes(value));
  }

  get emailAddress(): string {
    let value = this.get("emailAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set emailAddress(value: string) {
    this.set("emailAddress", Value.fromString(value));
  }

  get hostname(): string {
    let value = this.get("hostname");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set hostname(value: string) {
    this.set("hostname", Value.fromString(value));
  }
}

export class AccountCreation extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountCreation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AccountCreation must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AccountCreation", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AccountCreation | null {
    return changetype<AccountCreation | null>(
      store.get_in_block("AccountCreation", id.toHexString())
    );
  }

  static load(id: Bytes): AccountCreation | null {
    return changetype<AccountCreation | null>(
      store.get("AccountCreation", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get emailAddrPointer(): Bytes {
    let value = this.get("emailAddrPointer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set emailAddrPointer(value: Bytes) {
    this.set("emailAddrPointer", Value.fromBytes(value));
  }

  get accountKeyCommit(): Bytes {
    let value = this.get("accountKeyCommit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set accountKeyCommit(value: Bytes) {
    this.set("accountKeyCommit", Value.fromBytes(value));
  }

  get walletSalt(): Bytes {
    let value = this.get("walletSalt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set walletSalt(value: Bytes) {
    this.set("walletSalt", Value.fromBytes(value));
  }

  get psiPoint(): Bytes {
    let value = this.get("psiPoint");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set psiPoint(value: Bytes) {
    this.set("psiPoint", Value.fromBytes(value));
  }
}
